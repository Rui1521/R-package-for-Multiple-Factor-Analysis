if(bycol){
l = lapply(sets, function(x){data[,x]})
} else{
l = lapply(sets, function(x){data[x,]})
}
}
alpha_weight = function(tables){
# collect the values of the alpha weights of all tables into a weight vector
sapply(tables, function(x){1/(svd(x)$d[1])^2})
}
weight_matrix = function(tables, alphas){
# create weight matrix according to alpha weights returned from pca for each table
nc = sapply(tables, ncol)
diag(rep(alphas, times=nc))
}
partial_factor_score = function(tables, set, a, Q, ncomps=NULL){
K = length(tables)
Qs = split_tables(Q, set, bycol=FALSE)
pfs = list()
for (i in 1:K){
if (is.null(ncomps)){
pfs[[i]] = K * a[i] * tables[[i]] %*% Qs[[i]]
}else{
pfs[[i]] = K * a[i] * tables[[i]] %*% Qs[[i]][,1:ncomps]
}
}
return(pfs)
}
compromise_stats = function(data, sets, ncomps){
# Using other subfunctions, run a standard PCA on the corrected
# dataset to find the compromise.
tables = split_tables(data,sets)
a = alpha_weight(tables)
A = weight_matrix(tables, a)
M = diag(rep(1/nrow(data), nrow(data))) #diagonal mass matrix
W = as.matrix(data)
W_weighted = sqrt(M)%*%W%*%sqrt(A)
SVD_compromise = svd(W_weighted)
M2 = diag(1/sqrt(diag(M)))
A2 = diag(1/sqrt(diag(A)))
P = M2%*%SVD_compromise$u
Q = A2%*%SVD_compromise$v
d = SVD_compromise$d
eigenvalues = d^2
cfs = P%*%diag(d)
pfs = partial_factor_score(tables, sets, a, Q, ncomps)
return(list(d=d,eigenvalues=eigenvalues,cfs=cfs,pfs=pfs,Q=Q,A=A))
}
create_mfa = function(res, sets, center, scale, ncomps, data){
# create mfa class object
if (is.null(ncomps)){
new(Class = "mfa",
data = data, # include the original dataset for method use
ncomps = length(res$eigenvalues),
sets = sets,
center = center,
scale = scale,
singularValue = res$d,
eigenvalues = res$eigenvalues,
cfs = res$cfs,
pfs = res$pfs,
loadings = res$Q,
a_weights = diag(res$A))
}else{
new(Class = "mfa",
data = data, # include the original dataset for method use
ncomps = ncomps,
sets = sets,
center = center,
scale = scale,
singularValue = res$d[1:ncomps],
eigenvalues = res$eigenvalues[1:ncomps],
cfs = res$cfs[,1:ncomps],
pfs = res$pfs,
loadings = res$Q[,1:ncomps],
a_weights = diag(res$A))
}
}
runApp('MFA')
# create a S4 class for mfa
setClass("mfa",
slots = list(
data = "data.frame",
ncomps = "numeric",
sets = "list",
center = "logical",
scale = "logical",
singularValue = "numeric",
eigenvalues = "numeric",
cfs = "matrix",
pfs = "list",
loadings = "matrix",
a_weights = "numeric")
)
#' print
#'
#' print
#' @include classes.R
#' @param object a `mfa` object
#'
#' @return A visualization table
#' @rdname print
#' @export
setMethod(
"print",
signature = "mfa",
function(x, compromise = TRUE,pfs = TRUE, loadings = TRUE, tablenumber = 1){
cat("Number of objects: ")
print(nrow(x@cfs))
cat("Number of tables: ")
print(length(x@sets))
cat("Number of components: ")
print(ifelse(is.null(x@ncomps),length(x@sets),x@ncomps))
if(compromise == TRUE){
compromise_plot(x)
}
if(pfs == TRUE){
pfs_plot(x, tablenumber)
}
if(loadings == TRUE){
loadings_plot(x, tablenumber)
}
}
)
#' compromise_plot
#'
#' compromise_plot
#' @include classes.R
#' @param object a `mfa` object
#'
#' @return A plot of the compromises
#' @rdname compromise_plot
#' @export
setGeneric(
"compromise_plot",
function(x) standardGeneric("compromise_plot")
)
#' @describeIn compromise_plot plot of the tables
setMethod(
"compromise_plot",
signature = "mfa",
function(x){
# simple scatter-plot
plot(x@cfs[,1],x@cfs[,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points
points(x@cfs[,1],x@cfs[,2], pch = 19, col = "blue")
# plot text
text(x@cfs[,1],x@cfs[,2],
pos = 4, col = "gray50")
# graphic title
title("Compromise of tables")
}
)
#' pfs_table
#'
#' pfs_table
#' @include classes.R
#' @param object a `mfa` object
#' @param tablenumber The number of the table to display partial
#'        factor scores for.
#'
#' @return A plot of the partial factor scores for a table.
#' @rdname pfs_table
#' @export
setGeneric(
"pfs_plot",
function(x,tablenumber) standardGeneric("pfs_plot")
)
setMethod(
"pfs_plot",
signature = "mfa",
function(x,tablenumber){
i = tablenumber
# simple scatter-plot
plot(x@pfs[[i]][,1],x@pfs[[i]][,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points for pfs
points(x@pfs[[i]][,1],x@pfs[[i]][,2], pch = 19, col = "blue")
# plot text for pfs
text(x@pfs[[i]][,1],x@pfs[[i]][,2], labels = rownames(x@data),
pos = 4, col = "gray50")
# graphic title
title(paste("Partial Factor Scores for table",i))
}
)
#' loadings_plot
#'
#' loadings_plot
#' @include classes.R
#' @param object a `mfa` object
#' @param tablenumber the table in the dataset that you wish to display
#'        loadings for
#'
#' @return A plot of the variable loadings
#' @rdname loadings_plot
#' @export
setGeneric(
"loadings_plot",
function(x,tablenumber) standardGeneric("loadings_plot")
)
setMethod(
"loadings_plot",
signature = "mfa",
function(x,tablenumber){
i = tablenumber
# simple scatter-plot
plot(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points for loadings
points(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2], pch = 17, col = "red")
# plot text for loadings
text(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2],labels = colnames(x@data[x@sets[[i]]]),
pos = 4, col = "black")
# graphic title
title(paste("Variable Loadings for table",i))
}
)
runApp('MFA')
shiny::runApp('MFA')
# create a S4 class for mfa
setClass("mfa",
slots = list(
data = "data.frame",
ncomps = "numeric",
sets = "list",
center = "logical",
scale = "logical",
singularValue = "numeric",
eigenvalues = "numeric",
cfs = "matrix",
pfs = "list",
loadings = "matrix",
a_weights = "numeric")
)
#' print
#'
#' print
#' @include classes.R
#' @param object a `mfa` object
#'
#' @return A visualization table
#' @rdname print
#' @export
setMethod(
"print",
signature = "mfa",
function(x, compromise = TRUE,pfs = TRUE, loadings = TRUE, tablenumber = 1){
cat("Number of objects: ")
print(nrow(x@cfs))
cat("Number of tables: ")
print(length(x@sets))
cat("Number of components: ")
print(ifelse(is.null(x@ncomps),length(x@sets),x@ncomps))
if(compromise == TRUE){
compromise_plot(x)
}
if(pfs == TRUE){
pfs_plot(x, tablenumber)
}
if(loadings == TRUE){
loadings_plot(x, tablenumber)
}
}
)
#' compromise_plot
#'
#' compromise_plot
#' @include classes.R
#' @param object a `mfa` object
#'
#' @return A plot of the compromises
#' @rdname compromise_plot
#' @export
setGeneric(
"compromise_plot",
function(x) standardGeneric("compromise_plot")
)
#' @describeIn compromise_plot plot of the tables
setMethod(
"compromise_plot",
signature = "mfa",
function(x){
# simple scatter-plot
plot(x@cfs[,1],x@cfs[,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points
points(x@cfs[,1],x@cfs[,2], pch = 19, col = "blue")
# plot text
text(x@cfs[,1],x@cfs[,2],
pos = 4, col = "gray50")
# graphic title
title("Compromise of tables")
}
)
#' pfs_table
#'
#' pfs_table
#' @include classes.R
#' @param object a `mfa` object
#' @param tablenumber The number of the table to display partial
#'        factor scores for.
#'
#' @return A plot of the partial factor scores for a table.
#' @rdname pfs_table
#' @export
setGeneric(
"pfs_plot",
function(x,tablenumber) standardGeneric("pfs_plot")
)
setMethod(
"pfs_plot",
signature = "mfa",
function(x,tablenumber){
i = tablenumber
# simple scatter-plot
plot(x@pfs[[i]][,1],x@pfs[[i]][,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points for pfs
points(x@pfs[[i]][,1],x@pfs[[i]][,2], pch = 19, col = "blue")
# plot text for pfs
text(x@pfs[[i]][,1],x@pfs[[i]][,2], labels = rownames(x@data),
pos = 4, col = "gray50")
# graphic title
title(paste("Partial Factor Scores for table",i))
}
)
#' loadings_plot
#'
#' loadings_plot
#' @include classes.R
#' @param object a `mfa` object
#' @param tablenumber the table in the dataset that you wish to display
#'        loadings for
#'
#' @return A plot of the variable loadings
#' @rdname loadings_plot
#' @export
setGeneric(
"loadings_plot",
function(x,tablenumber) standardGeneric("loadings_plot")
)
setMethod(
"loadings_plot",
signature = "mfa",
function(x,tablenumber){
i = tablenumber
# simple scatter-plot
plot(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2],type = "n",
xlab = "first component", ylab = "second component")
# plot points for loadings
points(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2], pch = 17, col = "red")
# plot text for loadings
text(x@loadings[x@sets[[i]],][,1], x@loadings[x@sets[[i]],][,2],labels = colnames(x@data[x@sets[[i]]]),
pos = 4, col = "black")
# graphic title
title(paste("Variable Loadings for table",i))
}
)
runApp('MFA')
#' mfa
#'
#' Multiple Factor Analysis
#'
#' @include classes.R
#' @param data data set (matrix or data frame). Dimensions must be observations X variables.
#' @param sets list of vectors indicating the sets of variables (i.e. the mfa blocks).
#' @param ncomps integer indicating how many components (i.e. factors) should be used in the dimensionality reduction.
#' @param center either a logical value or a numeric vector of length equal to the number of active
#' variables in the analysis. (passed to the \code{scale} function)
#' @param scale either a logical value or a numeric vector of length equal to the number of active
#' variables in the analysis (passed to the \code{scale} function)
#'
#' @return
#' The returned value is an object of class "mfa" with the following elements: \cr
#' \code{eigenvalues} a vector containing eigenvalues for the final factors \cr
#' \code{cfs} a matrix of common factor scores \cr
#' \code{pfs} a list of partial factor scores for each table \cr
#' \code{loadings} a matrix of loadings \cr
#' \code{a_weights} alpha weight for each table \cr
#'
#' @importFrom methods new
#' @export
# main function
mfa = function(data, sets, ncomps = NULL, center = TRUE, scale = TRUE){
# main function
sets = convert_sets(data, sets)
data1 = preprocess(data,center,scale)
res = compromise_stats(data1,sets,ncomps)
create_mfa(res, sets, center, scale, ncomps, data)
}
# helper functions for mfa
convert_sets = function(data, sets){
#convert the names of active variables to column indices
lapply(sets, function(x){
if(class(x)=="character"){
which(colnames(data)%in%x)
}else{
x
}
})
}
preprocess = function(data, center=TRUE, scale=TRUE){
# preprocessing: center + normalize
d = scale(as.matrix(data), center = center, scale = scale)
apply(d, 2, function(x){sign(x) * sqrt(x^2/sum(x^2))})
}
split_tables = function(data, sets, bycol=TRUE){
# split tables
if(bycol){
l = lapply(sets, function(x){data[,x]})
} else{
l = lapply(sets, function(x){data[x,]})
}
}
alpha_weight = function(tables){
# collect the values of the alpha weights of all tables into a weight vector
sapply(tables, function(x){1/(svd(x)$d[1])^2})
}
weight_matrix = function(tables, alphas){
# create weight matrix according to alpha weights returned from pca for each table
nc = sapply(tables, ncol)
diag(rep(alphas, times=nc))
}
partial_factor_score = function(tables, set, a, Q, ncomps=NULL){
K = length(tables)
Qs = split_tables(Q, set, bycol=FALSE)
pfs = list()
for (i in 1:K){
if (is.null(ncomps)){
pfs[[i]] = K * a[i] * tables[[i]] %*% Qs[[i]]
}else{
pfs[[i]] = K * a[i] * tables[[i]] %*% Qs[[i]][,1:ncomps]
}
}
return(pfs)
}
compromise_stats = function(data, sets, ncomps){
# Using other subfunctions, run a standard PCA on the corrected
# dataset to find the compromise.
tables = split_tables(data,sets)
a = alpha_weight(tables)
A = weight_matrix(tables, a)
M = diag(rep(1/nrow(data), nrow(data))) #diagonal mass matrix
W = as.matrix(data)
W_weighted = sqrt(M)%*%W%*%sqrt(A)
SVD_compromise = svd(W_weighted)
M2 = diag(1/sqrt(diag(M)))
A2 = diag(1/sqrt(diag(A)))
P = M2%*%SVD_compromise$u
Q = A2%*%SVD_compromise$v
d = SVD_compromise$d
eigenvalues = d^2
cfs = P%*%diag(d)
pfs = partial_factor_score(tables, sets, a, Q, ncomps)
return(list(d=d,eigenvalues=eigenvalues,cfs=cfs,pfs=pfs,Q=Q,A=A))
}
create_mfa = function(res, sets, center, scale, ncomps, data){
# create mfa class object
if (is.null(ncomps)){
new(Class = "mfa",
data = data, # include the original dataset for method use
ncomps = length(res$eigenvalues),
sets = sets,
center = center,
scale = scale,
singularValue = res$d,
eigenvalues = res$eigenvalues,
cfs = res$cfs,
pfs = res$pfs,
loadings = res$Q,
a_weights = diag(res$A))
}else{
new(Class = "mfa",
data = data, # include the original dataset for method use
ncomps = ncomps,
sets = sets,
center = center,
scale = scale,
singularValue = res$d[1:ncomps],
eigenvalues = res$eigenvalues[1:ncomps],
cfs = res$cfs[,1:ncomps],
pfs = res$pfs,
loadings = res$Q[,1:ncomps],
a_weights = diag(res$A))
}
}
runApp('MFA')
wines <- read.delim("C:/Users/admin/Desktop/MFA/R/wines.txt")
View(wines)
runApp('MFA')
install.packages("rjson")
library("rjson")
json_file <- "https://github.com/chao-h/DS5220/raw/master/datas/bbc_preproceseed.json"
json_data <- fromJSON(file = json_file)
library("rjson")
json_data <- fromJSON(file = "bbc_preproceseed.json")
library("rjson")
json_file <- "bbc_preproceseed.json"
json_data <- fromJSON(file = json_file)
library("jsonlite")
json_data <- fromJSON(file = "bbc_preproceseed.json")
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library("jsonlite")
json_data <- fromJSON(file = "bbc_preproceseed.json")
library("jsonlite")
json_data <- fromJSON("bbc_preproceseed.json",flatten = TRUE)
library("jsonlite")
json_data <- fromJSON("bbc_preproceseed.json")
load("~/Desktop/MFA/.RData")
